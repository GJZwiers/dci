export const snapshot = {};

snapshot[`writeConfigFile 1`] = `
[
  "{}",
]
`;

snapshot[`writeConfigFile 2`] = `
[
  "{",
  '  "fmt": {',
  '    "files": {',
  '      "include": [],',
  '      "exclude": []',
  "    },",
  '    "options": {}',
  "  }",
  "}",
]
`;

snapshot[`writeConfigFile 3`] = `
[
  "{",
  '  "compilerOptions": {',
  '    // "allowJs": true                         /* Allow JavaScript files to be a part of your program. Use the \`checkJS\` option to get errors from these files. */',
  '    // "allowUnreachableCode": false           /* Disable error reporting for unreachable code. */',
  '    // "allowUnusedLabels": false              /* Disable error reporting for unused labels. */',
  '    // "checkJs": false                        /* Enable error reporting in type-checked JavaScript files. */',
  '    // "experimentalDecorators": true          /* Enable experimental support for TC39 stage 2 draft decorators. */',
  '    // "jsx": "react"                          /* Specify what JSX code is generated. */',
  \`    // "jsxFactory": "React.createElement"     /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */\`,
  \`    // "jsxFragmentFactory": "React.Fragment"  /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\`,
  \`    // "jsxImportSource": "react"              /* Specify module specifier used to import the JSX factory functions when using jsx: 'react-jsx*'. */\`,
  '    // "keyofStringsOnly": false               /* Make keyof only return strings instead of string, numbers or symbols. Legacy option. */',
  '    // "lib": [ "deno.window" ]                /* Specify a set of bundled library declaration files that describe the target runtime environment. */',
  '    // "noFallthroughCasesInSwitch": false     /* Enable error reporting for fallthrough cases in switch statements. */',
  '    // "noImplicitAny": true                   /* Enable error reporting for expressions and declarations with an implied \`any\` type.. */',
  '    // "noImplicitOverride": false             /* Ensure overriding members in derived classes are marked with an override modifier. */',
  '    // "noImplicitReturns": false              /* Enable error reporting for codepaths that do not explicitly return in a function. */',
  '    // "noImplicitThis": true                  /* Enable error reporting when \`this\` is given the type \`any\`. */',
  \`    // "noImplicitUseStrict": true             /* Disable adding 'use strict' directives in emitted JavaScript files. */\`,
  '    // "noStrictGenericChecks": false          /* Disable strict checking of generic signatures in function types. */',
  \`    // "noUnusedLocals": false                 /* Enable error reporting when a local variables aren't read. */\`,
  \`    // "noUnusedParameters": false             /* Raise an error when a function parameter isn't read */\`,
  '    // "noUncheckedIndexedAccess": false       /* Add \`undefined\` to a type when accessed using an index. */',
  '    // "strict": true                          /* Enable all strict type checking options. */',
  '    // "strictBindCallApply": true             /* Check that the arguments for \`bind\`, \`call\`, and \`apply\` methods match the original function. */',
  '    // "strictFunctionTypes": true             /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */',
  '    // "strictPropertyInitialization": true    /* Check for class properties that are declared but not set in the constructor. */',
  '    // "strictNullChecks": true                /* When type checking, take into account \`null\` and \`undefined\`. */',
  '    // "suppressExcessPropertyErrors": false   /* Disable reporting of excess property errors during the creation of object literals. */',
  '    // "suppressImplicitAnyIndexErrors": false /* Suppress \`noImplicitAny\` errors when indexing objects that lack index signatures. */',
  "  },",
  '  // "importMap": "import_map.json",           /* The location of an import map to be used when resolving modules. If an import map is explicitly specified, it will override this value. */',
  '  "lint": {',
  '    "files": {',
  '      // "include": []                         /* List of files or directories that will be linted. */',
  '      // "exclude": []                         /* List of files or directories that will not be linted. */',
  "    },",
  '    "rules": {',
  '      // "tags": []                            /* List of tag names that will be run. Empty list disables all tags and will only use rules from \`include\`. */',
  '      // "exclude": []                         /* List of rule names that will be excluded from configured tag sets. If the same rule is in \`include\` it be run. */',
  '      // "include": []                         /* List of rule names that will be run. Even if the same rule is in \`exclude\` it will be run. */',
  "    },",
  '    // "report": "pretty"                      /* The default report format to use when linting */',
  "  },",
  '  "fmt": {',
  '    "files": {',
  '      // "include": []                         /* List of files or directories that will be formatted. */',
  '      // "exclude": []                         /* List of files or directories that will not be formatted. */',
  "    },",
  '    "options": {',
  '      // "useTabs": false                      /* Whether to use tabs (true) or spaces (false) for indentation. */',
  '      // "lineWidth": 80                       /* The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases. */',
  '      // "indentWidth": 2                      /* The number of characters for an indent. */',
  '      // "singleQuote": false                  /* Whether to use single quote (true) or double quote (false) for quotation. */',
  '      // "proseWrap": "always"                 /* Define how prose should be wrapped in Markdown files. */',
  "    }",
  "  },",
  '  "tasks": {},',
  '  "test": {',
  '    "files": {',
  '      // "include": []                         /* List of files or directories that will be searched for tests. */',
  '      // "exclude": []                         /* List of files or directories that will not be searched for tests. */',
  "    }",
  "  }",
  "}",
]
`;

snapshot[`writeConfigFile 4`] = `
[
  "{",
  '  "fmt": {',
  '    "files": {',
  '      // "include": []         /* List of files or directories that will be formatted. */',
  '      // "exclude": []         /* List of files or directories that will not be formatted. */',
  "    },",
  '    "options": {',
  '      // "useTabs": false      /* Whether to use tabs (true) or spaces (false) for indentation. */',
  '      // "lineWidth": 80       /* The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases. */',
  '      // "indentWidth": 2      /* The number of characters for an indent. */',
  '      // "singleQuote": false  /* Whether to use single quote (true) or double quote (false) for quotation. */',
  '      // "proseWrap": "always" /* Define how prose should be wrapped in Markdown files. */',
  "    }",
  "  }",
  "}",
]
`;

snapshot[`writeConfigFile 5`] = `
[
  "{",
  '  "lint": {',
  '    "files": {',
  '      "include": [],',
  '      "exclude": []',
  "    },",
  '    "rules": {',
  '      "include": [],',
  '      "exclude": []',
  "    }",
  "  }",
  "}",
]
`;

snapshot[`writeConfigFile 6`] = `
[
  "{",
  '  "compilerOptions": {}',
  "}",
]
`;

snapshot[`writeConfigFile 7`] = `
[
  "{",
  '  "tasks": {}',
  "}",
]
`;

snapshot[`writeConfigFile 8`] = `
[
  "{",
  '  "importMap": "import_map.json"',
  "}",
]
`;

snapshot[`writeConfigFile 9`] = `
[
  "{",
  '  "fmt": {',
  '    "files": {',
  '      "include": [],',
  '      "exclude": []',
  "    },",
  '    "options": {}',
  "  },",
  '  "lint": {',
  '    "files": {',
  '      "include": [],',
  '      "exclude": []',
  "    },",
  '    "rules": {',
  '      "include": [],',
  '      "exclude": []',
  "    }",
  "  },",
  '  "tasks": {},',
  '  "test": {',
  '    "files": {',
  '      "include": [],',
  '      "exclude": []',
  "    }",
  "  },",
  '  "compilerOptions": {}',
  "}",
]
`;

snapshot[`writeConfigFile 10`] = `
[
  "{",
  '  "test": {',
  '    "files": {',
  '      "include": [],',
  '      "exclude": []',
  "    }",
  "  }",
  "}",
]
`;
